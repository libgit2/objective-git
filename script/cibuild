#!/bin/bash

# cibuild
# Installs any necessary dependencies, builds and runs tests
#
# Dependent tools & scripts:
# - script/bootstrap
# - script/schemes.awk
# - script/update_libssl_ios
# - script/xctool.awk
# - awk
# - xcodebuild
# - xcpretty (gem)

export SCRIPT_DIR=$(dirname "$0")

##
## Configuration Variables
##

SCHEMES="$@"

#
# Defines variables used throughout this script.
#
config ()
{
    # The workspace to build.
    #
    # If not set and no workspace is found, the -workspace flag will not be passed
    # to `xcodebuild`.
    #
    # Only one of `XCWORKSPACE` and `XCODEPROJ` needs to be set. The former will
    # take precedence.
    : ${XCWORKSPACE=$(find_pattern "*.xcworkspace")}

    # The project to build.
    #
    # If not set and no project is found, the -project flag will not be passed
    # to `xcodebuild`.
    #
    # Only one of `XCWORKSPACE` and `XCODEPROJ` needs to be set. The former will
    # take precedence.
    : ${XCODEPROJ=$(find_pattern "*.xcodeproj")}

    # A bootstrap script to run before building.
    #
    # If this file does not exist, it is not considered an error.
    : ${BOOTSTRAP="$SCRIPT_DIR/bootstrap"}

    # Extra options to pass to xcodebuild.
    : ${BUILD_OPTIONS="RUN_CLANG_STATIC_ANALYZER=NO"}

    # A whitespace-separated list of default schemes to build.
    #
    # Individual names can be quoted to avoid word splitting.
    : ${SCHEMES:=$(xcodebuild -list -project "$XCODEPROJ" 2>/dev/null | awk -f "$SCRIPT_DIR/schemes.awk")}

    export XCWORKSPACE
    export XCODEPROJ
    export BOOTSTRAP
    export BUILD_OPTIONS
    export SCHEMES
}

##
## Build Process
##

#
# Entry point to the build process.
#
main ()
{
    config

    if [ -f "$BOOTSTRAP" ]
    then
        echo "*** Bootstrapping..."
        "$BOOTSTRAP" || exit $?
    fi

    echo "*** Prebuilding OpenSSL"
    $SCRIPT_DIR/update_libssl_ios

    echo "*** The following schemes will be built:"
    echo "$SCHEMES" | xargs -n 1 echo "  "
    echo

    echo "$SCHEMES" | xargs -n 1 | (
        local status=0

        while read scheme
        do
            # Build each scheme, but stop the entire build if one returns
            # a nonzero status code
            build_scheme "$scheme" || status=1 || break
        done

        exit $status
    )
}

#
# Outputs the first file or directory in pwd that matches the given argument.
#
find_pattern ()
{
    ls -d $1 2>/dev/null | head -n 1
}

#
# Invokes xcodebuild using either XCWORKSPACE or XCODEPROJ passing BUILD_OPTIONS
# and relaying any arguments as additional command-line parameters.
#
run_build_tool ()
{
    if [ -n "$XCWORKSPACE" ]
    then
        set -o pipefail && \
            xcodebuild -workspace "$XCWORKSPACE" $BUILD_OPTIONS "$@" 2>&1 | \
            xcpretty --color
    elif [ -n "$XCODEPROJ" ]
    then
        set -o pipefail && \
            xcodebuild -project "$XCODEPROJ" $BUILD_OPTIONS "$@" 2>&1 | \
            xcpretty --color
    else
        echo "*** No workspace or project file found."
        exit 1
    fi
}

#
# Simply echoes build output, but monitors for "wrong SDK" and "missing target"
# messages in the output, which trigger nonzero status codes.
#
parse_build ()
{
    awk -f "$SCRIPT_DIR/xctool.awk" 2>&1 >/dev/null
}

#
# Builds the given scheme. If the scheme supports tests, these are run as well.
#
build_scheme ()
{
    local scheme=$1

    echo "*** Building and testing $scheme..."
    echo

    local sdkflag=
    local action=test

    # Determine whether we can run unit tests for this target.
    run_build_tool -scheme "$scheme" test | parse_build

    local awkstatus=$?

    if [ "$awkstatus" -eq "1" ]
    then
        # SDK not found, try for iphonesimulator.
        sdkflag='-sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 5"'

        # Determine whether the unit tests will run with iphonesimulator
        run_build_tool "$sdkflag" -scheme "$scheme" test | parse_build

        awkstatus=$?

        if [ "$awkstatus" -ne "0" ]
        then
            # Unit tests will not run on iphonesimulator.
            sdkflag=""
        fi
    fi

    if [ "$awkstatus" -ne "0" ]
    then
        # Unit tests aren't supported.
        action=build
    fi

    run_build_tool $sdkflag -scheme "$scheme" $action
}

main
